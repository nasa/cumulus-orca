"use strict";(self.webpackChunkorca_website=self.webpackChunkorca_website||[]).push([[1789],{1485:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var r=s(4848),o=s(8453);const t={id:"research-logging-libraries",title:"Logging Libraries Research Notes",description:"Research notes on some potential logging libraries."},i=void 0,a={id:"developer/research/research-logging-libraries",title:"Logging Libraries Research Notes",description:"Research notes on some potential logging libraries.",source:"@site/docs/developer/research/research-logging-libraries.md",sourceDirName:"developer/research",slug:"/developer/research/research-logging-libraries",permalink:"/cumulus-orca/docs/developer/research/research-logging-libraries",draft:!1,unlisted:!1,editUrl:"https://github.com/nasa/cumulus-orca/edit/develop/website/docs/developer/research/research-logging-libraries.md",tags:[],version:"current",frontMatter:{id:"research-logging-libraries",title:"Logging Libraries Research Notes",description:"Research notes on some potential logging libraries."},sidebar:"dev_guide",previous:{title:"Deep Archive Storage Migration Research Notes",permalink:"/cumulus-orca/docs/developer/research/research-deep-archive-migration"}},l={},c=[{value:"Preconditions",id:"preconditions",level:2},{value:"CumulusLogger",id:"cumuluslogger",level:2},{value:"Default Logger",id:"default-logger",level:2},{value:"Powertools",id:"powertools",level:2},{value:"Recommendation",id:"recommendation",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"preconditions",children:"Preconditions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"As ORCA runs in AWS, logger should tie into AWS structures."}),"\n",(0,r.jsxs)(n.li,{children:["Presently, ORCA uses the ",(0,r.jsx)(n.a,{href:"https://github.com/nasa/cumulus-message-adapter-python#logging-with-cumuluslogger",children:"Python CumulusLogger"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Presently, many ORCA tasks use ",(0,r.jsx)(n.code,{children:"run_cumulus_task"}),", a related component of the Python CumulusLogger."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cumuluslogger",children:"CumulusLogger"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Developed by Cumulus for interactions with AWS and ",(0,r.jsx)(n.a,{href:"https://nasa.github.io/cumulus/docs/workflows/input_output",children:"CMA input/output"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Adds some useful AWS context, though it is all redundant with information already stored in our CloudWatch logs, as long as we have one log-group per lambda."}),"\n",(0,r.jsxs)(n.li,{children:["Tied to CMA-specific features such as ",(0,r.jsx)(n.a,{href:"https://nasa.github.io/cumulus/docs/workflows/input_output#replaceconfig-cumulus-remote-message",children:"S3 storage of inputs"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run_cumulus_task"})," handles pulling in S3 events."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Tied to CMA-specific ",(0,r.jsx)(n.a,{href:"https://nasa.github.io/cumulus/docs/workflows/input_output#cma-inputoutput",children:"input/output"}),", which varies based on whether the running environment is AWS or Local."]}),"\n",(0,r.jsx)(n.li,{children:"Maintained by/for Cumulus, which has caused conflicts with our development."}),"\n",(0,r.jsx)(n.li,{children:"Does not implement standard logging interface, requiring knowledge of the CumulusLogger-specific functions."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example Cloudwatch message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "message": "some string",\n    "sender": "lambda_name",\n    "version": "$LATEST",\n    "timestamp": "2022-09-02T18:06:00.782125",\n    "level": "error"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Recommend we move away from CumulusLogger where possible.\nThe ",(0,r.jsx)(n.code,{children:"ReplaceConfig"})," keys that would indicate use of the Logger's features are red-herrings, and the input formatting can be handled via standard AWS Step Function construction.\n",(0,r.jsx)(n.code,{children:"copy_to_archive"})," is the one Lambda that Cumulus calls in their own workflows, and thus must be able to handle ",(0,r.jsx)(n.a,{href:"https://nasa.github.io/cumulus/docs/workflows/input_output#replaceconfig-cumulus-remote-message",children:"S3 storage of inputs"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"default-logger",children:"Default Logger"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Python's default ",(0,r.jsx)(n.a,{href:"https://docs.python.org/3/library/logging.html",children:"logging library"})," provides an excellent interface.\nAny proposed options should implement the standard library to maintain ",(0,r.jsx)(n.a,{href:"/cumulus-orca/docs/developer/development-guide/code/clean-architecture",children:"clean architecture"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Standard output is picked up by Lambda's Cloudwatch logs with no additional effort."}),"\n",(0,r.jsx)(n.li,{children:"Lacks information that would be helpful in determining AWS context unless added manually."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Code example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\nimport logging\n\nLOGGER = logging.getLogger(__name__)\n\ndef lambda_handler(event, context):\n    LOGGER.error(\"some string\")\n    return {\n        'statusCode': 200,\n        'body': json.dumps('results')\n    }\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Resulting Cloudwatch message:\n",(0,r.jsx)(n.code,{children:"[ERROR]\t2022-09-02T19:40:17.662Z\t3020ae47-dd25-41b3-80fc-8bb3514cfb5c\tsome string"})]}),"\n",(0,r.jsx)(n.h2,{id:"powertools",children:"Powertools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Available and documented on ",(0,r.jsx)(n.a,{href:"https://awslabs.github.io/aws-lambda-powertools-python/latest/",children:"AWSLabs"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Implements Python's default ",(0,r.jsx)(n.a,{href:"https://docs.python.org/3/library/logging.html",children:"logging library"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Requires environment variables for setup values."}),"\n",(0,r.jsx)(n.li,{children:"Automatically adds AWS context information."}),"\n",(0,r.jsx)(n.li,{}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Code example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\nimport os\n\nimport aws_lambda_powertools\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nos.environ["POWERTOOLS_SERVICE_NAME"] = "powertools_test_service_name"\nos.environ["LOG_LEVEL"] = "INFO"\n\nLOGGER = aws_lambda_powertools.Logger()\n\n\ndef some_func():\n    LOGGER.info("Doing thing.", extra={"someKey": 5})\n\n    try:\n        raise KeyError("some key error")\n    except Exception as ex:\n        LOGGER.exception("Auto logging")\n        LOGGER.error(f"Manual logging: \'{ex}\'")\n    return\n\n\n@LOGGER.inject_lambda_context(log_event=True)  # event may be security risk\ndef lambda_handler(\n        event, context: LambdaContext\n):\n    some_func()\n    return {\n        \'statusCode\': 200,\n        \'body\': json.dumps(\'results\')\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:"Resulting Cloudwatch message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "level": "ERROR",\n    "location": "some_func:23",\n    "message": "Manual logging: \'\'some key error\'\'",\n    "timestamp": "2022-09-01 20:11:25,278+0000",\n    "service": "powertools_test_service_name",\n    "cold_start": true,\n    "function_name": "lambda_name",\n    "function_memory_size": "128",\n    "function_arn": "arn:aws:lambda:us-west-2:000000000000:function:lambda_name",\n    "function_request_id": "bdb3bb29-5023-498a-b7a5-0582b03e215e",\n    "xray_trace_id": "1-631111ec-64c294e313312cb53eb68777"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"recommendation",children:"Recommendation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["As the ",(0,r.jsx)(n.a,{href:"https://github.com/nasa/cumulus-message-adapter-python#logging-with-cumuluslogger",children:"Python CumulusLogger"})," is tied to Cumulus,\nit is recommended that we decouple from it.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Any references to deployed layer should be removed from Terraform, including deployed layer and Step Function configuration."}),"\n",(0,r.jsx)(n.li,{children:"Schema validation checks should be added to calling function."}),"\n",(0,r.jsxs)(n.li,{children:["References to run_cumulus_task should be replaced with manual transformation of inputs into non-architecture-specific formats.\n",(0,r.jsx)(n.a,{href:"https://bugs.earthdata.nasa.gov/browse/ORCA-522",children:"Jira card for removal here"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"copy_to_archive"})," S3 requirements could be accomplished with a helper Lambda developed initially by us and maintained by Cumulus that handles the S3 retrieval\nand passes the result along to ",(0,r.jsx)(n.code,{children:"copy_to_archive"}),".\n",(0,r.jsx)(n.a,{href:"https://bugs.earthdata.nasa.gov/browse/ORCA-520",children:"Jira card for implementation here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Given the standardized implementation and features of Powertools, it is a good pick for replacing the CumulusLogger in Orca code.\n",(0,r.jsx)(n.a,{href:"https://bugs.earthdata.nasa.gov/browse/ORCA-521",children:"Jira card for replacement here"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Recommend installing via Pip install as opposed to AWS Layer.\n",(0,r.jsx)(n.a,{href:"https://awslabs.github.io/aws-lambda-powertools-python/latest/core/logger/#removing-additional-keys",children:"Documentation indicates"}),' that there can be "unintended side effects if you use Layers" with certain features.']}),"\n",(0,r.jsxs)(n.li,{children:["Since Powertools properly implements the ",(0,r.jsx)(n.a,{href:"https://docs.python.org/3/library/logging.html",children:"standard Logging library"}),", we can now use the ",(0,r.jsx)(n.code,{children:"logging.exception"}),' method to auto-capture and log exceptions, including stack traces.\nFrom the "Auto logging" code example above, Cloudwatch message is:',"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "level": "ERROR",\n    "location": "some_func:22",\n    "message": "Auto logging",\n    "timestamp": "2022-09-01 20:11:25,278+0000",\n    "service": "powertools_test_service_name",\n    "cold_start": true,\n    "function_name": "lambda_name",\n    "function_memory_size": "128",\n    "function_arn": "arn:aws:lambda:us-west-2:000000000000:function:lambda_name",\n    "function_request_id": "bdb3bb29-5023-498a-b7a5-0582b03e215e",\n    "exception": "Traceback (most recent call last):\\n  File \\"/var/task/powertools_test.py\\", line 20, in some_func\\n    raise KeyError(\\"some key error\\")\\nKeyError: \'some key error\'",\n    "exception_name": "KeyError",\n    "xray_trace_id": "1-631111ec-64c294e313312cb53eb68777"\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Powertools also contains a ",(0,r.jsx)(n.a,{href:"https://awslabs.github.io/aws-lambda-powertools-python/latest/core/tracer/",children:"Tracing library"})," which could be helpful in debugging. Presently untested."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(6540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);